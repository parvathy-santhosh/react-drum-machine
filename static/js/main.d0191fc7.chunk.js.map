{"version":3,"sources":["audio/drum0.mp3","audio/drum1.mp3","audio/drum2.mp3","audio/drum3.mp3","audio/drum4.mp3","audio/drum5.mp3","audio/drum6.mp3","audio/drum7.mp3","audio/drum8.mp3","DrumPad.js","Drum.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","letters","split","items","index","drum","drum0","description","drum1","drum2","drum3","drum4","drum5","drum6","drum7","drum8","DrumPad","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","play","bind","assertThisInitialized","document","getElementById","innerHTML","letter","react_default","a","createElement","className","onClick","id","src","Component","Drum","handleKeyPress","e","pressedKey","String","fromCharCode","keyCode","includes","indexOf","addEventListener","map","x","src_DrumPad","App","src_Drum","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d0191fc7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/drum0.9ddaa0e6.mp3\";","module.exports = __webpack_public_path__ + \"static/media/drum1.5b8311e1.mp3\";","module.exports = __webpack_public_path__ + \"static/media/drum2.a1ce5ae6.mp3\";","module.exports = __webpack_public_path__ + \"static/media/drum3.083337e4.mp3\";","module.exports = __webpack_public_path__ + \"static/media/drum4.4779d0b2.mp3\";","module.exports = __webpack_public_path__ + \"static/media/drum5.4779d0b2.mp3\";","module.exports = __webpack_public_path__ + \"static/media/drum6.bb969ce7.mp3\";","module.exports = __webpack_public_path__ + \"static/media/drum7.4e1d470d.mp3\";","module.exports = __webpack_public_path__ + \"static/media/drum8.aaece1e8.mp3\";","import React, {Component} from 'react';\nimport drum0 from \"./audio/drum0.mp3\";\nimport drum1 from \"./audio/drum1.mp3\";\nimport drum2 from \"./audio/drum2.mp3\";\nimport drum3 from \"./audio/drum3.mp3\";\nimport drum4 from \"./audio/drum4.mp3\";\nimport drum5 from \"./audio/drum5.mp3\";\nimport drum6 from \"./audio/drum6.mp3\";\nimport drum7 from \"./audio/drum7.mp3\";\nimport drum8 from \"./audio/drum8.mp3\";\n\nconst letters = 'QWEASDZXC'.split('');\n\nconst items = [\n  {\n    index: 0,\n    drum: drum0,\n    description: \"Drum Zero\"\n  },\n  {\n    index: 1,\n    drum: drum1,\n    description: \"Drum One\"\n  },\n  {\n    index: 2,\n    drum: drum2,\n    description: \"Drum Two\"\n  },\n  {\n    index: 3,\n    drum: drum3,\n    description: \"Drum Three\"\n  },\n  {\n    index: 4,\n    drum: drum4,\n    description: \"Drum Four\"\n  },\n  {\n    index: 5,\n    drum: drum5,\n    description: \"Drum Five\"\n  },\n  {\n    index: 6,\n    drum: drum6,\n    description: \"Drum Six\"\n  },\n  {\n    index: 7,\n    drum: drum7,\n    description: \"Drum Seven\"\n  },\n  {\n    index: 8,\n    drum: drum8,\n    description: \"Drum Eight\"\n  }\n]\n\nclass DrumPad extends Component {\n  constructor(props) {\n    super(props);\n    this.play = this.play.bind(this);\n  }\n  play(){\n    document.getElementById(letters[this.props.index]).play();\n    document.getElementById(\"display\").innerHTML = items[this.props.index].description;\n  }\n  render() {\n    let letter = letters[this.props.index];\n    let drum = items[this.props.index].drum;\n    return (\n      <div className=\"drum-pad\" onClick={this.play}>\n        <span>{letter}</span>\n        <audio id={letter}>\n          <source src={drum}/>\n        </audio>\n      </div>\n    );\n  }\n}\n\nexport default DrumPad;\nexport {items, letters};\n","import React, {Component} from 'react';\r\nimport DrumPad, {items, letters} from './DrumPad.js';\r\n\r\nclass Drum extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleKeyPress = this.handleKeyPress.bind(this);\r\n  }\r\n  handleKeyPress(e){\r\n    let pressedKey = String.fromCharCode(e.keyCode);\r\n    if (letters.includes(pressedKey)){\r\n      document.getElementById(pressedKey).play();\r\n      document.getElementById('display').innerHTML = items[letters.indexOf(pressedKey)].description;\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    document.addEventListener(\"keydown\", this.handleKeyPress);\r\n  }\r\n  render() {\r\n    return (\r\n      <div id=\"drum-pads\">\r\n        {[0,1,2,3,4,5,6,7,8].map((x) => { return (<DrumPad index={x} />); })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Drum;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Drum from './Drum.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1> Drum Machine </h1>\n          <hr className=\"hr\" />\n            <div id=\"drum-machine\">\n              <Drum />\n              <div id=\"display\"><br/></div>\n            </div>\n          <hr className=\"hr\" />\n          <small className=\"footer\"> --- parvathy-santhosh -- 2018 --- </small>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}